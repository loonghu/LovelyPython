##language:zh
#pragma section-numbers off
||'''status'''|| 正式 || ZoomQuiet|| 完成度:103% 修订 Issue 1012 ||
[[TableOfContents]]

##startInc
= KDay 3:使用第3方模块规范化表单 =
'''Cheetah 只能输出有配套模板的页面内容,但是……'''
 * 对于经常变化的表单,有什么更好的方式来生成表单?
 * 小白开始了 Pythonic 重构思考,感觉 `VC` 格局中的 `V` ~ view,展示层,少不了人手工对 HTML 格式的页面模板进行维护, 而且每个对应的功能页面就要写个模板, 再且模板文件的复用非常难...
 * 所以,想起在 `CDays` 故事演练中使用过的 Karrigell 快速表单模块:
  
== Karrigell_QuickForm  ==
`~即有之,则用之!`
 * 示例：
{{{#!python
from Karrigell_QuickForm import Karrigell_QuickForm

p = Karrigell_QuickForm('teste','POST','foo.py','Authentication')
p.addElement('text','login')
p.addElement('text','password')
p.addRule('login','required',"Login is required!")
p.addGroup(["submit","botao_enviar","submit","Send"]
           ,["reset","botao_limpar","reset","Clear"])
"""根据习惯hack! 原先的自动生成 value 的为指定按钮文字.
p.addGroup(["submit","botao_enviar","Send"]
           ,["reset","botao_limpar","Clear"])
"""
p.display()
}}} 6行完成一个标准的登录表单!!!哈哈哈!赞!

图 KDay3-1 使用KQF生成的试验表单
attachment:kday3-login-page.png

=== 改造 ===
'''毕竟是 alpha 版本,居然还是全面的table 结构!'''
 * 代码也很ugly 哪!
 
 图 KDay3-2 使用["Leo"]自动整理后的情景
 attachment:kday3-leo-adjust.png
 
 * 立即着手改造单选列表生成:
{{{#!python
def addRadioGroup(self,name,value):
	"""add a radio element - addRadioGroup('genre',{'male':'Male','female':'Female'})"""
        self.form_list.append("<tr><td align='right' valign='top'><b>"+name.title().replace('_',' ')+":</b></td> <td valign='top' align='left'>")
	radio = ""
        t = value.items()
	for a,b in t:
	    radio = radio + "<input type='radio' name='"+name+"' value='"+a+"'>"+"<label><font face=verdana size=2>"+b+"</font></label><br>"
        self.form_list.append(radio+"</td>")
	self.form_list.append("</tr>")
}}}这是原版的单选列表生成器 从名字就可以看出 `addRadioGroup` ~ 追加单选按钮组;生成的就是常见的一组选项,只接受其中一个选择,选择另外的,原先选择的就自动清除; 但是,郁闷的是,原版的是将"单选按钮组"塞到一个表格行中,而小白经过了CSS的学习,期望使用 列表配合CSS 完成一个看起来和之前一样,但是HTML 代码更加少,控制更加自由的"单选按钮组",所以: 
 * 増补了个基于列表的干净版本的单选框生成器:
{{{#!python
def addRadioList(self,name,desc,value,id=""):
    """add a radio element export as UL LI group
    """
    htm = """
        <li id='%s'><b>%s:</b>
            <ul>"""
    self.form_list.append(htm%(id,desc))
    radio = ""
    t = value.items()
    tmpl = """<li>
        <input type='radio' 
        name='%s' 
        value='%s'>  
        <label>%s</label>      
        """             # 列表项模板字串
    for a,b in t:
        radio = radio + tmpl%(name,a,b)
    self.form_list.append(radio+"</ul></li>")
}}} 仿照原先的名字,不触动原版的生成器函式,自定了个`addRadioList`~ 追加单选按钮列表!而且使用了Python 内置的文本模板,令代码更加清晰;-)

=== 复用 ===
'''直接将昨天的展示函式修改一下子就应该好用的!'''

图 KDay3-3 在Leo 中仿制函式的情景

attachment:kday3-leo-qpublish.png
 * 昨天的`expage(dict)`只是将理解的.ini内容打印到页面中,今天小白只需要将输出的格式变成可以提交的表单就好,所以,可以复用很大一部分代码;
 * 简单的在Leo 中将`def expage(dict)`复制到对应文件并改名成`def qpublish(dict)`,在`askloop`逻辑单元前后追加点使用 `KQF` 的辅助代码,就成了,,,
##`def expage(dict):`
{{{#!python
def qpublish(dict):
    exp = ""
    p = Karrigell_QuickForm('fm_kq','POST','#',dict.desc.desc)    
    p.addElement('node','<ul>','')
    # 深入数据 基本和昨天的一样,仅仅是输出时使用 Karrigell_QuickForm 对象而已
    qli = {}
    k = [int(i) for i in dict.ask.keys()]
    k.sort()
    for i in k:
        ask = dict.ask[str(i)]
        qk = [j for j in ask.keys()]
        qk.sort()
        for q in qk:
            if 1==len(q):
                qli[q] = ask[q]
            else:
                pass        
        p.addRadioList("cr_ask%s"%i
                   ,ask["question"]
                   ,qli)
    p.addElement('node','</ul>','')
    p.addGroup(["submit","btn_submit","提交"]
               ,["reset","btn_reset","重写"])
}}}
 * 注意到原先的 Karrigell_QuickForm 只有display(),要求表单页面立即输出, 但是小白现在需要进一步的HTML 处理后再输出,
 * 所以配合的:`class Karrigell_QuickForm-->export()`有了以下修订{{{#!python
def export(self):
    """ export the html form code so people can do something for them self
    """
    exp = ""
    ...
    for c in self.css_list:
        exp += c+"\n"
    for i in self.form_list:
        exp += i+"\n"
    return exp
    }}} 基本上就是将原先的 `print` 替换为 `exp+=` 记录为字串对象然后返回
 * 还有`def addElement(self,element,name,options=None):` 中追加更自由的任何HTML 节点输出:{{{        
        elif element == 'node':
            self.form_list.append(name)
}}}


== JS 问题 ==
'''一切顺心,表单顺利自动生成了,但是,Karrigell_QuickForm 提供的前端表单检验居然不支持Radio列表的!'''
 * 呜乎!这是个问题哪...
 * 因为:如果不是所有人将所有问题都回答完就提交的话:
  * 不检验这种情况,则成绩统计没有意义;
  * 交给服务端检验,浪费带宽!还要想办法记录上次是谁回答的问题情况, 然后再返回/提示/要求重答等等等等...
 
=== 继续发掘 ===
'''现在的问题是有什么现成的可以模式化的定义表单检验的前端JS组件? '''
 *  TiosnG !`[ti'aosn'gu]`
  * There is one site named Google! -- 哈哈哈!!运用这个流传在行者们中的咒语,翻查了一下,确认 `Validation` ~ 有效性检查是小白想要的检验的学名,于是得到...
  * '''JVF'''~JavaScript Validation Framework -- Javascript 有效检验框架 国人作品!
   * 访问地址: http://cosoft.org.cn/projects/jsvalidation
   * 精巧地址: http://bit.ly/2icRKJ

## mechiland@gmail.com jzchen80@hotmail.com

图 KDay3-4 2004年当时的JVF作品页面情景

attachment:kday3-jvf.png

{{{详细::
JVF是AMOWA社区作品,该社区致力于创建一个实用精巧的Ajax框架;
当年的官网是 http://www.amowa.net 
现在迁移到 http://buffalo.sourceforge.net/
JVF 可以从 http://cosoft.org.cn/projects/jsvalidation 获得;
精巧地址:http://bit.ly/2icRKJ

相关的动态网页技术,在PCS401 DHTML 进行分享
}}}

=== 迁就,先! ===
为了与Karrigell 配合,当前需要:

 1. 在配置文件中,追加声明`jvf=%(base)s/karriweb/questionnaire/js` 这样的专门虚拟目录发布,以便,其它各种应用也可以享受JVF 支持
 1. JVF 实际运行的 validation-framework.js 本身, 也要声明可访问的目录:`var ValidationRoot = "/jvf/";`
 1. 小量修订 JVF 声明错误输出的页面元素 `类` 名 '''#errorDiv'''{{{
ValidateMethodFactory.validateRequired = function(field, params) {
	...
	window.location.replace("#errorDiv");
}}} 使用replace 来减少不必要的页面刷新
 1. 使用 `p.saveJSRule("../js/validation-config.xml")` 声明提交时要检验的表单元素

{{{注意:
测试JS 成功引用否的小技巧:
`alert("Include KO!");` 
在JS脚本中加入强制提示,刷新页面,如果见到已经包含的信息就表明引用路径对了!
}}}

==== KQF 对JVF 的迁就 ====
'''JVF的使用很有个性,使用外部的XML 文件进行检验行为的设置...'''
 
 * 所以,对应的增补Karrigell_QuickForm
  1. addJSRule() 追加专门的JVF 规则{{{#!python
    def addJSRule(self,name,message):
        """add a xml rule for javascript checking
        """
        exp = self.JSvMXLnode%(name,message)
        self.JSvRules.append(exp)
}}}
  1. addJSValidation() 追加调用JVF的页面行为{{{#!python    
    def addJSValidation(self):
        """add a javascript rule in order to validate a form field  
        - addRule('elem_name','required','Name is required!')
        """
        orig = "enctype='multipart/form-data'"
        repl = """
            onsubmit='return doValidate("%s");'
            """ 
        begin_form=self.form_list[0].replace(orig
                                     ,repl%self.name) 
        self.form_list[0] = begin_form
}}}
  1. saveJSRule() 记录规则集合为JVF需要的XML{{{#!python
    def saveJSRule(self,xml):
        """exp and save a xml rule for javascript checking
        """
        exp = ""
        for node in self.JSvRules:
            exp+= node
        #exp = self.JSvXMLtmpl%(form,exp)
        open(xml,'w').write(self.JSvXMLtmpl%(self.name
                                             ,exp)
                                             )
}}}
  1. 对应的KQF中追加统一的预设声明{{{
self.JSvXMLtmpl="""<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE validation-config SYSTEM "validation-config.dtd">
<validation-config lang="auto">	
	<form id="%s" show-error="errorMessage" onfail="" 
	show-type="first">
    %s
	</form>
</validation-config>
"""
self.JSvMXLnode = """
		<field name="%s" 
		display-name="%s" onfail="">
			<depend name="required" />
		</field>
"""
self.JSvRules = []
}}}

=== 果然不出所料 ===
'''仅仅追加少量代码就完成所想的客户端JS验证功能'''

在原先问卷解析函式中,追加准备好的JVF 支持{{{
def qpublish(dict):
    ...
    ## 具体问题解析
    k.sort()
    for i in k:
        ...
        p.addJSRule("cr_ask%s"%i,"问题%s "%i) # 声明此处要进行JS检验
    ## 整体行为处理
    p.addJSValidation()
    p.saveJSRule("js/validation-config.xml")    #收集检验声明,生成JVF 使用的外部XML设置文件
    ...
}}}
 * 没有任何悬念的完成任务!


图 KDay3-4 加载JVF 后,表单有任何项没有提交就报错

attachment:kday3-jvf-alert.png

== 页面编码 ==
从开始使用 Karrigell ,小白在 FireFox 浏览器中就发现有中文乱码问题...

图 KDay3-5 页面乱码现象

attachment:kday3-bad-page-encode.png

 * 小白努力的检查了源代码,模板代码,将所有应该声明或是本身也另存为了 utf-8;
 甚至于发现配置文件中有疑似输出编码声明的地方也逐一打开,比如说:
 {{{
[Server]
...
outputEncoding = utf-8
...
# determine if form fields should be encoded
encodeFormData = 1
...
}}}
 * 但是依然是乱码,每次非得手工将浏览器的字符编码设置成 utf-8 才正常...
 * 怎么回事儿呢? 小白不得不到列表中吼,经过行者们的研究,确认是 Karrigell 内部处理编码有问题,不过,想解决也非常简单,使用以下的页面响应编码声明:
{{{
RESPONSE['Content-Type'] = "text/html; charset=utf-8"
}}}

{{{脚注:
行者们讨论中文乱码问题的原始记要在
啄木鸟社区维基: http://wiki.woodpecker.org.cn/moin/MiscItems/2008-08-05
精巧地址: http://bit.ly/2y9Y33
}}}

== 合理滥用Leo ==
'''到现在页面都是白板!不能忍了!使用CSS!'''
 * 小白先不理会 Karrigell 的外部文件引用效率,决定简单些,直接将CSS,写入页面,反正有["Leo"]来维护

图 KDay3-6 通过Leo 每个页面复用嵌入的css 定义

attachment:kday3-leo-css-embed.png

 * 注意 `<<k_base>>` 节点前的小红箭头记号 ~ 这表明此节点是从 别处 克隆过来的!
 
=== CSS设计技巧 ===
'''复用以前自个儿的积累是非常好的事儿!'''
 * 颜色的设计是个问题,不过有好工具来偷!
 '''Red Alt - I Like Your Colors'''
  * 访问地址: http://www.redalt.com/Tools/ilyc.php
  * 精巧地址: http://bit.ly/91GT9

图 KDay3-7 演示 redalt.com 的CSS颜色分析工具

attachment:kday3-red-alt.png

=== CSS ===
  * 每一需要CSS美化的页面都加`<<k_base>>` 引用,
  * 引用都是从`复用代码` 中clone 过来的同一节点
  * 包含的就是`k_base.css` 小白根据 Django 社区的样式修剪成的一个通用CSS设计,套用到当前的系统中

图 KDay3-8 问卷管理和展示CSS效果

attachment:kday3-django-css.png
 
== 小结 ==
'''今天发现并引入了 [http://www.orionlab.net/karrigell_quickform/Karrigell_QuickForm.html KQF]和 [http://www.amowa.net/jsvalidation/ JVF]好象有点复杂的样子……'''

图 KDay3-9 最终问卷效果

attachment:kday3-today-result.png

 * 当然在小白的开发故事中,这不是最终接受的方案,精彩还要继续……
 * 现在所有的基本功能点都有了,接下来的就是要实用化:
  1. 支持多用户,得有用户验证,要登录
  1. 支持多问卷选择/回答/编辑

== 实例下载 ==
使用SVN下载地址:
 * 实例下载: http://openbookproject.googlecode.com/svn/trunk/LovelyPython/KDays/kday3
 * 精巧地址: http://bit.ly/2OscFJ
 * 注意有在上层安置的 JS-JVF 目录:
  * http://openbookproject.googlecode.com/svn/trunk/LovelyPython/KDays/js
  * 精巧地址: http://bit.ly/2lzYbl
 本日成果::
{{{
kday3
|-- Karrigell_QuickForm.py  KQF快速表单模块
|-- tryKQF.py           KQF试用页面
|-- dict4ini.py         Limodou 贡献的 ini 解析模块
|-- q/                  问卷设计文本收藏目录
|   |-- easy051201.cfg  第一份问卷设计
|   |-- easy051201.cfg.080824231959 问卷设计历史存档
|   `-- easy051201.cfg.080824232025
|-- mana.pih            问卷设计页面
|-- qdesign.py          问卷设计实际行为脚本
|-- qpage.pih           问卷复审页面
|-- qpage.py            问卷复审实际行为脚本
|-- qprint.pih          问卷展示页面
|-- qprint.py           问卷展示实际行为脚本
`-- questionnaire.tmpl  问卷展示模板
}}}


== 练习 ==

在前面章节练习mysite的基础上, 完成以下功能:  
   * (1) 利用Karrigell_QuickForm改写编辑页面(edit), 增加更多的文章属性, 如日期, 标签, 引用链接等;
   * (2) 实现了上述之后, 使用JVF, 依次校验用户输入的有效性;
   * (3) 提示: 可以设计一个文章类, 多个文章对象可以利用pickle保存; 最终应该能够实现新建或修改文章并保存入本地文件的功能.
    
##endInc
----
返回 [:ObpLovelyPython/KDays:KDays实例故事]

::-- ZoomQuiet [[[DateTime(2005-12-11T04:50:15Z)]]]

[[PageComment2]]

