##language:zh
#pragma section-numbers off

||'''status'''|| 校对  || ZoomQuiet || 100% ||


[[TableOfContents]]

##startInc
= CDay 3 优化!多线程 =
~ 应用多线程再次优化

`KISS 才是王道!`

== 盘点功能 ==

小白自满的清点到现在已经自主实现的所有功能:
 1. 一个基于命令行的界面，可以:
     1. 可以将光盘内容索引存储为硬盘上的文本文件
      * 存储成*.cdc 的文本文件`
      * 可以快速指定存儲目录 
      * 可以快速指定文件名 
     1. 可以根据储存到硬盘上的光盘信息进行搜索
      * 可以根据指定关键字进行匹配搜索
      * 可以搜索指定目录中所有*.cdc文件
 1. 一个基于Web 网页的界面，同样可以:
     1. 可以将光盘内容索引存储为硬盘上的文本文件
      * 存储成*.cdc 的文本文件`
      * 可以快速指定文件名 
     1. 可以根据储存到硬盘上的光盘信息进行搜索
      * 可以根据指定关键字进行匹配搜索
      * 可以搜索指定目录中所有*.cdc文件

已经超额完成了当初一动念间的所有功能了哪……

但是，人生不如意者，十之八九也！

=== 为什么这么慢？ ===

在小白 兴甚致哉 的将过往百多张VCD，几十张DVD都导成 `*.cdc` 摘要文件通过 PyCDC 管理起来后，发觉，在搜索时真的非常的慢哪…………

列表中也有人在吼！ "俺就是将硬盘备份DVD导入了一下，十万左右文件，5千左右目录，怎么搜索起来这么慢哪……"

介问题就严重了，小白当然不认为是Python 天生慢，看着就几行的相关代码，当然知道是自个儿的功力不够，根本没有想过执行效率问题...

好吧，该优化时就优化，没有什么不好意思的！

不过，乍整呢？


== 分析 ==
嗯嗯嗯，经过不断的重构，反思，小白已经非常习惯先分析，再找现成代码来偷懒的"开发"模式了:

 * 原先没有感觉的搜索速度和现在有感觉的慢，唯一变化的文件数量和总体积的变化
 * 影响速度的行为应该有:
  1. 打开文件
  1. 文件读取
  1. ini 解析
  1. 搜索匹配
  1. 输出
 * 以上元素，除了搜索匹配，其它都是使用内置模块实现的，基本没有效率问题
 * 但是，搜索匹配也是简单匹配，几乎没有什么好改进的哪…………
 * 唉呀呀？晕！小白突然想到，整个流程中，是按照过滤出的文件名，每一文件都要走上述所有过程后才轮到下一个的，可以说强大的计算机几乎一直在等待简单的输入输出后，再处下一个文件！
 * 自然的想到！

== 并发处理 ==
'''让电脑同时搜索多个文件不就好了？！'''

=== 进程Vs线程 ===
但是！并发什么来处理？

小白也道听途说过什么进程和线程的，那么使用什么方式好呢？没有头绪呢，吼吧！

嗬嗬嗬，看来是吼到点子上了，列表中行者们的回复丰富的很！

"进程是操作系统可以调配的最小资源集合！"

"Python 支持多线程的干什么不用？"

"线程才是操作系统可以调配的最小资源单位！"

"一个程序至少有一个进程,一个进程至少有一个线程."

"一个线程可以创建和撤销另一个线程;同一个进程中的多个线程之间可以并发执行;但是多个进程中的不同线程很难交互数据..."

晕了，彻底晕了这都在说人话嘛？ 小白自个儿参照着作了点研究，确认：
 1. 进程和线程就是程序执行时请求的系统不同级别资源的名称
 1. 多进程就象孙悟空猴毛变的多个分身,大家自个儿干自个儿的,牵扯较少
 1. 多线程就象哪吒的三头六臂，一个人同时干多个事儿，还能相互配合

嗬嗬嗬，那当然是多线程了！毕竟搜索结果是得集成在一起输出汇报的哪！

=== KISS 之 ===
'''KISS == Keep It Simple,Stupid'''

在列表中，小白记住了`KISS` 原则，不论什么，坚持简单的过程/原理/结构/代码,就是自在!

所以,参考模块手册:[http://aspn.activestate.com/ASPN/docs/ActivePython/2.4/python/lib/thread-objects.html thread-objects]
 
找个实例代码:[http://guanjh.javaeye.com/blog/88904   Python线程编程的两种方式] -- 作者:   [http://guanjh.javaeye.com/ guanjh]

照猫画虎准没大错 益rz ! 

{{{详细::
PCS206 thread
详细说明了线程支持模块的基本使用
PCS207 threading
详细分享了高级线程模块的基础应用
}}}

==== 实现 ====
用 `threading模块` 的类组织实现,比 用`thread模块` 中的线程函式,可以更加容易的掺合入不同的处理过程,就 用`threading模块`了!

按例,改造 `cdctools.py` :

追加准备进行并发搜索的线程对象:
{{{#!python
# -*- coding: utf-8 -*-
from threading import Thread                    # 导入线程支持模块
class grepIt(Thread):
    def __init__ (self,cdcfile,keyword):
        Thread.__init__(self)
        self.cdcf = cdcfile
        self.keyw = keyword.upper()
        self.report = ""
    def run(self):
        if ".cdc" in self.cdcf:
            self.report = markIni(self.cdcf,self.keyw)
}}}

嗬嗬嗬,忒简单了,就几行,而且,实际行为就一个!`markIni()` 也是改造自原先的`cdcGrep()`
{{{#!python
# -*- coding: utf-8 -*-
def markIni(cdcfile,keyword):
    '''配置文件模式匹配函式:
    '''
    report = ""
    keyw = keyword.upper()
    cfg = rcp()
    cfg.read(cdcfile)
    nodelist = cfg.sections()
    nodelist.remove("Comment")
    nodelist.remove("Info")
    for node in nodelist:
        if keyw in node.upper():
            print node
            report += "\n %s"%node # error as "\n",node|str(node)...
            continue
        else:
            for item in cfg.items(node):
                if keyw in item[0].upper():
                    report += "\n %s/%s "%(node,item)
    return report
}}}

在末尾追加实际搜索调用,并声明成模块测试:
{{{#!python
# -*- coding: utf-8 -*-
def grpSearch(cdcpath,keyword):
    '''多线程群体搜索函式:
    '''
    begin = time.time()
    filelist = os.listdir(cdcpath)          # 搜索目录中的文件
    searchlist = []                         # 记录发起的搜索编程
    for cdcf in filelist:
        pathcdcf = "%s/%s"%(cdcpath,cdcf)
        current = grepIt(pathcdcf,keyword)  # 初始化线程对象
        searchlist.append(current)          # 追加记录线程队列
        current.start()                     # 发动线程处理
    for searcher in searchlist:
        searcher.join()
        print "Search from ",searcher.cdcf," out ",searcher.report     
    print "usage %s s"%(time.time()-begin)
if __name__ == '__main__':
    '''直接利用模块测试部分,先检验是否正确可用
    '''
    grpSearch("cdc/","EVE")
}}}

这样就可以直接先在命令行中运行 `python cdctools.py` 测试是否可用了;
而且随手根据看到过的代码追加了运行时间汇报,可以输出搜索总用时:

图 CDay3-1cdctools.py改进后运行结果
attachment:cday3-cdctools-improve.png

== TODO ==
呼!主体功能摸索完毕!
然后?然后就顺势而为了:
 * 修订 命令行界面的代码配合
 * 修订 Karrigell 的Web 桌面界面的代码配合
 * 进一步优化速度,还可以怎么整呢?
  * 缓存ini 的对象化解析?! 不用每次,每个.cdc 文件都要重新解析一回
  * 缓存搜索过的关键字结果?! 有相同的搜索就不用再来一遍了嘛
  * 缓存...

嗬嗬嗬,可以做的还有很多,而且,可以想到这些,小白已经不是小白了! 可喜可贺!


== 小结 ==
## 总体语法等等叙述,注意给出相关知识的阅读指导
在本日故事中，小白由实现大规模使用原创工具的真实体验中引发了又一轮重构；针对执行效率的重构，就象玩头脑急转弯，只要充分整体直觉的分析运行时的软件行为，很容易确定瓶颈；
有了问题的准确理解后，再向行者请教时便有了确切方向，进而容易获得有效的提示；
不过,的确有些电脑的基础FAQ是回避不了的，在理解了进程和线程后，Python 内置的模块就可以解决了：
 1. threading模块 是个易用好用的线程支持模块，可以快捷的将合适的行为并发化;
 1. 多线程的调试一定要设计有合理明确的输出信息，以便确认哪里有问题

== 练习 ==
## 设计实用练习,确保体例代码可以自由扩展出各种实用应用!
(1) 熟悉线程相关知识后，利用Lock和RLock实现线程间的简单同步，使得10个线程对同一共享变量进行递增操作，使用加锁机制保证变量结果的正确。

(2) 使用Queue实现多线程间的同步。比如说，十个输入线程从终端输入字符串，另十个输出线程依次获取字符串并输出到屏幕。

(3) Python中的Event是用于线程间的相互通信，主要利用信号量机制。修改题一的程序，利用信号量重新实现多线程对同一共享变量进行递增操作。


##endInc
----
::-- ZoomQuiet [[[DateTime(2007-04-13T16:32:36Z)]]]
[[PageComment2]]

