##language:zh
#pragma section-numbers off
##草稿|校对|正式
||'''status'''|| 正式 || ZoomQuiet || 完成度:100%||


[[TableOfContents]]
##startInc

= 前言 =

如果以厨艺来作比喻的话:

##应该收集排版好这些图书的封面
 * "Learning Python" Mark Lutz / David Ascher ~ 等入门教材图书,应该算 白米饭
 * "Python in a Nutshell" Alex Martelli ~ 等手册参考大书,应该算 大盘的素菜／汤
 * "Dive Into Python" Mark Pilgrim ~ 等技术精解图书,应该算 极入味的 荤菜
 * "Text Processing in Python"  David Mertz ~ 等专门领域的详解图书,应该算风味名吃

众所周知：不吃主食得饿死的,不食蔬菜要生病的,光吃大荤一样没救的！到地头不来点风味会水土不服地;

"Lovely Python" 就是下酒的老醋花生,解酒的胡辣汤,下饭的泡菜！
 * PS: 中国特种部队野外装备里是使用 涪凌榨菜 作综合性盐/矿物质/维生素 补充品的 ;-)

本书总结中国一批先学先用了Python的行者们的亲身体验,为从来没有听说过Python 的人,准备的一份实用的导学性图书;
 * 试图将优化后的学习体验,通过故事的方式传达给只有学校系统学习体验的读者,同时也分享了蟒样(Pythonic)的知识获取技巧;
 * 试图将最常用的代码和思路,通过 作弊条(Cheat Sheet~提示表单) 的形式分享给有初步基础的Python 用户,来帮助大家多快好省的完成功能;

"Lovely Python" 期望成为学习使用Python 的同好们的沟通话题,引发进一步的学习/应用/创造/推广!


{{{脚注::
名词解释:行者
(1)∶佛教语. 即“头陀”. 行脚乞食的苦行僧人;又指方丈的侍者及在寺院服杂役尚未剃发的出家者 
(2)∶泛指修行佛道之人 
(3)∶《西游记》中孙悟空的别名
在啄木鸟Python技术社区
http://wiki.woodpecker.org.cn/moin/WoodpeckerHackers (精巧地址:http://bit.ly/TUzr3)
被借用成为Hacker 的中文专用词,
意指在自由软件技术世界不断探寻前行的学习者...
}}}

== 本书阅读技巧 ==
 Pythonic::
    * -- 简单的说就是使用Python 的思维去解决问题的态度,记住Python 就是Python, 如果你拿JAVA 的思路和方式来使用Python 不是不可以,而是会得不偿失的...详细的,大家跟着内容蹓一圏,再和以往使用其它语言解决类似问题时的过相比较就知道了 ;-)
    * 本书不是教材,不要期望可以根据本书泡制出考试大纲来获得什么认证
    * 现实生活中的各种需求,不会根据教材的编制来要求的;所以,一切从需求出发,关注数据的处理,快速使用即有功能来完成愿望才是 `Pythonic` 的真髓!


 建议阅读态度::
 学习Python 不是什么大事儿 -- 和学习自行车类似,千万不要用学汽车的劲头来学习自行车:"非要先会拆修自行车了才敢骑行" -- 非要将Python 的所有语法规则学完之后才敢真正使用Python 来解决实际问题; 反了!其实这才是本末倒置的
  1. 记住学习的目的就是要解决实际问题,如果一个语言的技法看不出与你现在的问题有关,就先甭理她! 看的多用的多了自然就会在合适的时机使用了,真的! ~ 这和学习英语时所谓“语感”类似的;)
  1. 跟着实例故事走,不要想当前问题以外的事儿,依照眼前问题的解决顺序来逐步学习--虚无缥缈的语法规则是最难记忆的,只有和具体问题的解决绑定,才记的牢!
  1. 看似零散的知识点,其实都是相通的,好比任何计算都可以归结为加减运算一样,不论多高深的技法,都可以使用粗浅直白的代码来完成相同的工作, **任何简陋但是可运行的代码,都比精致美观但是无法运行的代码要好!** 
   * 所以,背好唐诗三百首,不会作诗也会吟! 背好英语900句,不会作文也得分!
   * 甭总想着要跟着一个完美的教程走完才可以成为Pythoner; 其实常见问题的处置代码看熟了,想不会写Py脚本也难了!

=== 代码阅读技巧 ===
`没有技巧!`
 * 只要将代码copy 到你的机器中运行,然后保持好奇心,有针对性的尝试小小修改一点,立即运行一下,看是否吻合自个儿的预想,就是最好的代码阅读技法!
 * Python 被设计成友好的,容易理解和使用的脚本语言,最好的学习方式就是使用之!期望大家在尝试后,平常也注意积累一些自个儿中意的代码片段,如果可以进一步分享回来那就太好了!

本书的所有代码都可以使用SVN(Subversion)公开的下载:
  * 下载地址: http://openbookproject.googlecode.com/svn/trunk/LovelyPython/
  * 可爱的Python 图书源码目录约定:{{{
LovelyPython/
+-- CDays       (CDays 实例故事代码)
+-- KDays       (KDays 实例故事代码)
+-- PCS         (Python Cheat Sheet ~ Python 作弊条 内容)
+-- exercise    (各章练习,按照章节对应收集)
\-- pages       (图书正文 维基格式文本目录)
}}}

`提醒`:
 * 如果读者下载了相关代码时,发觉和图书中引用的代码有不同,不要惊奇,那是勤劳的行者们,在不断的优化实例代码!


=== 反馈渠道 ===
'''本书是开放的,永远接受各种建议,看不过眼的聪明的读者可以直接在本书的专用邮件列表上进行交流,这样也许下一版的图书就有你的贡献了.'''

 * 如果发现本书内容上任何方面的错误,行者们都将倾情接受指教;-) 别有心得的读者,任何时候想改进/改正/改善/改革本书的文字/代码/图片,都可以加入到图书专用讨论列表来,汇同行者们一齐来完善这本有趣的好书!
 * 提供方式与行者们沟通: 

 在线资源::
 * 邮件列表: http://www.zeuux.org/mailman/listinfo/zeuux-python
  * 精巧地址: http://bit.ly/3rJucf
  * 订阅后,就可以和所有本书的读者以及作者,以及所有订阅了此列表的中国Pythoner们分享图书以及Pythonic体验了!
 * 意见反馈：http://code.google.com/p/openbookproject/issues
  * 精巧地址: http://bit.ly/U5fAB
  * 使用方式: 通过Google 公司提供的项目管理管理环境,使用提案(Issue)的方式来提交意见,相关使用文档:
   * 快速使用Issue教程: http://code.google.com/p/openbookproject/wiki/UsageIssue
    * 精巧地址: http://bit.ly/xxSHq
   * Issue标签详解 http://code.google.com/p/openbookproject/wiki/IssueTags
    * 精巧地址: http://bit.ly/DOCdK
   * Issue流程概述 http://code.google.com/p/openbookproject/wiki/IssueFlow
    * 精巧地址: http://bit.ly/IXkNt
  * 针对本书的各方面,自由提出看法,我们会认真处理,并及时同步到在线版本的图书中，持续修订到再版就可以将你的建议合并进来, 谢先 ;-)
  * 反馈Issue 样例:{{{
标题:[LovPy]PCS304 AbtEurasia 增补缺少的,,
正文:
现在内容:
  Eurasia 项目沿革 中,,,
  "不过后来我们的团队很快编写了上百万行的智能," 
修订建议:
  增补上下文,好象没有说完!
  以及,作者简介也没有完成,,,
理由:
  读不通  
}}}
  * 访问地址: http://code.google.com/p/openbookproject/issues/detail?id=1000
  * 精巧地址: http://bit.ly/aa0F

##endInc
----
::@USER@ [@TIME@]
[[PageComment2]]

