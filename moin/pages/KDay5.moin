##language:zh
#pragma section-numbers off

||'''status'''|| 正式 || ZoomQuiet|| 完成度:97%||

[[TableOfContents]]

##startInc
= KDay5: 通过session重构应用流程 =
'''快速利用已有代码,运用体会到的所有技巧,快速重构功能实现'''
 * 既然,在昨日,小白通过测试 .ks 模式的发布方式,确认这样可以减少代码文件数量,而且通过 Leo 可以快速重构各种功能
 * 那么,让原先分散的.pih 们也整合到一个 '''mana.ks''' 事务页面中吧!

== 悠然 Leo ==
Clone ~ 克隆节点功能,在 Leo 中的快捷键是:
{{{
   Ctrl+`
}}}从来没有什么编辑器的操作令小白如此自信过...

图 KDay5-1 在Leo 中运用克隆节点的情景
attachment:kday5-leo-clone.png

 * 因为,只要保证,所有 `<< htmlcode >>`节点和`<< pagehead >>`及`<< pagefoot >>`节点是 Clone 来的
  * 那么, 就等于统一了了所有页面的外观!
   * `<< htmlcode >>`节点 收集了HTML相关的标准头/尾输出字串,以及CSS样式定义
   * `<< pagehead >>`及`<< pagefoot >>`节点 是分别利用`<< htmlcode >>`节点中的相应定义输出定制的页面头/尾
  * 而且这三个节点,可以单独收纳在另外的节点中,专门进行维护!

== 调整事务响应 ==
'''现在,小白决定将问卷的使用和管理拆分为简单明确的两个事务页面'''
 * `index.ks` 文件对应,默认访问页面,是问卷回答/统计的使用事务页面
 * `mana.ks` 文件对应,有权限用户的问卷设计管理事务页面

那未,首先小白得解决:
  * 用户从`/index.ks/login` 登录后的个人信息,怎样传递给 `mana.ks`?
 
=== 页面间传递对象 ===
'''当然的,小白的期望是Pythonic 式的传递完整对象,而不用判别/编码/DB中转...'''
 * 行者指点过:""不是有 `pickle` 序列化模块嘛!"
 * 小白猜测:将对象序列化为字串作为页面间的URL参数捅过去就好哪!
  * 打印当前的会话容器序列化字串看一看:{{{
print pickle.dumps(sess.usr)
}}}

{{{详细::
PCS210 pickle
对象序列化模块,支持将对象导出成硬盘文件以便进行网络传输等等其它进一步操作;
在PCS210 中,分享了进一步操作技巧
}}}

图 KDay5-2 将原生序列化对象打印到页面的情景

attachment:kday5-pickle-object.png

  * 唉呀呀...有空格,以及其它符号的!一定会被解析为非期待参数的...
  * 那就得使用URL安全编码了,,,
  * 找呀找呀,找朋友,找到一个`urlsafe_b64encode(s)` 是 '''base64''' 模块中的
  * OK 组织测试一下子:{{{#!python    
# 序列化对象以便页面间传递
pisess = pickle.dumps(sess.usr)
print pisess
print "<br/>尝试URL 安全序列化-->  "
sessurl = base64.urlsafe_b64encode(pisess)
print sessurl
print "尝试load 回来--> <br/> "
print pickle.loads(base64.urlsafe_b64decode(sessurl))
}}}

图 KDay5-3 原始和编码后的对象序列打印到页面的对比情景

attachment:kday5-pickle-base64.png  

 * 非常理想! 可以将所有用户状态信息包含在一个字典对象中,而字典对象可以编码成URL安全的格式,通过链接在任何页面中被Karrigell 重新解码并重新载入成标准的字典对象,就可以自然的进行任意操作了;-)
 * 用之! 先将设计中的富信息链接,输出到页面的<SPAN/>~菜单生成容器中:
{{{#!python   
print SPAN(A('> 编辑管理问卷'
        ,href="../mana.ks/edit?qp=%s&obj=%s"%(
            qpname
            ,base64.urlsafe_b64encode(
                pickle.dumps(sess.usr))
                )
            )
        ,id="mana")
}}} 确认无误后,将 <SPAN/> 标签清除,就等于在问卷回答界面中追加了一个编辑的入口链接;

 * 注意:
  1. 使用 `../mana.ks`  是因为 .ks 事务页面实际都是进一层的`*.ks/action`访问,所以要链接到另外的事务页面,要使用相对路径修正的
  1. 对`<A>` 追加了一个 `id="mana"` 的属性是为了让CSS 击中,进行显示的处理,对应的CSS定义是:{{{
SPAN#mana{border-bottom: 2px solid #778;
    border-left: 2px solid #778;
    float:right;color: #930; 
    background-color: whitesmoke; padding: 2px;}
}}}效果如下:

图 KDay5-4 问卷列表和含有页眉控制菜单的问卷页面

attachment:kday5-control-menu.png  
  
 * 当然的,应该只有权限用户才会看到此链接~ 只要简单的在菜单生成部分追加个用户身份的判定就好;
  * 只是怎么管理和组织用户权限组?这个明天再说了,,,
 * 不过,在开发阶段完全开放——反正将实现问卷的版本管理,这会儿不用怕的说;-)

 至此::
  * 小白通过访问链接的参数,携带了足够的用户信息,来支持各种判定和外部文件的读取支持;
  * 完成了针对不同用户进行不同响应的关键Web应用功能;
  * 然而所需要的仅仅是一个内置模块的支持,以便随手打印到页面的脚本调试方式,,,
  
 页面调试::
  * 就Python 的Web应用调试而言,非常直接!
  * 因为Python 的内置自省能力,可以在运行时的任何一刻使用 `dir()` 函式,将当前内存空间中有关对象全部打印出,以便进行观察;
  * 小白一直使用这种"土办法"进行调试的,唯一发现的技巧就是:
   * 必要时使用 `<PRE/>` ~ HTML 引用标签将输出字串包起来
   * 以便原样显示,以免有时候Python 的输出含有`<>`字符前后包围时,被游览器误解为HTML标签而试图解析,结果在页面上看不出,得使用"查看源代码"方式,从HTML 原始输出中才能观察到!
   
 
== 重构编辑操作 ==
'''当然的所谓 mana.ks 事务页面就是要完全替代之前使用7个文件才完成的问卷编辑流程'''
 * 小白,二话不说先将成功运行的 `index.ks` 节点在 Leo 中用`Ctrl-Shift-c`+`Ctrl-Shift-v`复制成 `mana.ks` 节点然后快速的修剪
 * 再将原先`qpage.py` 的 '''expage(dict)''' 重构为  `index.ks` 的 '''_qshow(dict,aim)'''
  * 99% 的代码都不变,仅仅是传入的参数重新命名而已{{{#!python
def _qshow(dict,aim):
    """将dict 内容输出为回答问卷
    """
    exp = ""
    p = Karrigell_QuickForm('fm_kq','POST',aim,dict.desc.desc)
    p.addElement('node','<ul>','')
    # 深入数据
    qli = {}
    k = [int(i) for i in dict.ask.keys()]
    k.sort()
    for i in k:
        ask = dict.ask[str(i)]
        qk = [j for j in ask.keys()]
        qk.sort()
        for q in qk:
            if 1==len(q):
                qli[q] = ask[q]
            else:
                pass
        question = ask["question"]+"<sup>答案::%s</sup>"%ask["key"]
        ## 这里美化一下子,奇偶行使用不同的CSS来控制
        if i%2 == 0:
            p.addRadioList("cr_ask%s"%i
                   ,question
                   ,qli
                   ,"even")
        else:
            p.addRadioList("cr_ask%s"%i
                   ,question
                   ,qli)
        p.addJSRule("cr_ask%s"%i,"问题%s "%i)

    p.addJSValidation()
    p.saveJSRule("js/validation-config.xml")
    p.addElement('node','</ul>','')
    p.addGroup(["submit","btn_submit","提交","btn"]
               ,["reset","btn_reset","重写","btn"])
    exp += p.export()   
    return exp
}}}

 * 同理,使用原先十分之一的时间,快速将一连串的 .pih 动态页面,改写为 .ks 事务页面
 * 只是为了增加版本管理的功能,追加了一个操作{{{
# 先复制一下子
shutil.copy2(qpage,qpage+".%s"%time.strftime("%y%m%d%H%M%S"
                                             , time.localtime())
             )
}}}
  * 这里使用到了 '''shutil'''高级文件处理模块,就可以实现每当一个新的问卷提交后, 先把之前的问卷备份保存为一个历史版本, 这样一来, 就不会因为可能的误操作或后悔这次的修改或哪天需要查看旧版本的问卷时, 还可以从硬盘上方便地找到.

{{{详细::
PCS212 shutil
介绍了这一针对文件操作的高级支持模块的基本使用技巧;
对 copy2() 这一函式好奇的读者可以进入 PCS212 进一步探寻,,,
}}}

== 历史版本 ==
'''小白是领教过啄木鸟社区的维基的,习惯了维基式版本管理的反悔模式,当然的也想自个儿弄一个,以便在问卷编辑过程中可以回退到任意一个编辑版本中'''

图 KDay5-5 问卷历史版本访问列表,原始情景
attachment:kday5-history-version.png  

 * 几次小的尝试性修改,在 `/q` 中聚集了一批命名有模式可寻的问卷设计稿文件
  * 就是前述进行历史版本自动记录时的后缀设定:
{{{
".%s"%time.strftime("%y%m%d%H%M%S", time.localtime())
 | |   |     |       |                   +-- 生成当前时间对象
 | |   |     |       +-- 时间规格字串,这儿的含义是 年,月,日,小时,分,秒 紧跟着拼一齐
 | |   |     +-- 时间格式化输出,将当前时间根据规格输出
 | |   +-- 使用 time 模块中的支持函式
 | +-- 字段模板替换算子,和引号后%引领的对应配合,将对象的内容以字符串的格式输出到对应位置
 +-- 模板字串,这里要求输出 .080916225229 格式的文本字串
}}}

{{{详细::
PCS213 time 模块
进一步分享了这一对时间相关操作支持的非常到位的常用模块的具体使用技巧;
}}}

 * 直接利用问卷列表的处理代码,小修改一下子,就成为历史版本列表的实现,归到{{{#!python
def historic(**var):
    << pagehead >>
    @others   
    << pagefoot >>
}}}的 `@others` 节点中,具体的
 * 小白注意到,自个儿已经自然的将事务页面中每个具体请求响应部分的代码也八股化了:
  1. `<< pagehead >>` 节点包含标准的页头 信息
   * 不过是一个`print _htmhead("标题文字")` 将预定HTML 代码少量处理后输出的小函式
  1. `@others`  包含所有具体行为的章节脚本
  1. `<< pagefoot >>` 节点包含标准的页底 信息
   * 更加简单的`print htmfoot` 打印行为, 就可以将展现在页面底部的如`Powered by:...`什么的广告等内容统一起来, 以后直接使用这一个简单的print语句就可以呈现页面底部的内容了!

=== 关键代码 ===
具体的历史版本问卷列表输出代码如下:
{{{#!python
qnow = fnmatch.filter(os.listdir(conf.qpage.qpath)
                       , '%s.cfg.*'%sess.usr["qp"])
# 从相关目录搜索出相关文件
print "<UL>"
qnow.reverse()
for l in qnow:
    s = l.split(".")
    print LI(A("""%s 
             <sup>%s/%s/%s %s:%s:%s 版本</sup>
             """%(s[0]
             ,s[-1][:2]
             ,s[-1][2:4]
             ,s[-1][4:6]
             ,s[-1][6:8]
             ,s[-1][8:10]
             ,s[-1][10:]
             ),href="edit?his=%s"%s[-1]
                )
             )
# 分解文件信息,组织成访问链接
}}}老技巧,使用 `fnmatch` 模块将吻合模式的文件搜索出来,成一个列表对象
 * 现在的 模式:`'%s.cfg.*'%sess.usr["qp"]`
  * 即,当然要看的问卷名+".cfg"+`.历史标识字串`
  * `.历史标识字串` 就是之前随手复制时,设定的{{{
time.strftime("%y%m%d%H%M%S", time.localtime())
}}} 时间字串
  * 小白自个儿设定的是 `年月日时分秒`  的组合,使用字串的切片操作,一下子就重新组织输出好了

图 KDay5-6 历史版本时间点附加输出成功情景
attachment:kday5-history-time.png

 * 再创造个链接,追加个`?his=` 的历史版本参数标识

 * 立即,回头修改一下子 {{{#!python
def edit(**var):
    #...
    if "his" in QUERY.keys():
        #进入历史版本编辑
        qpage = "%s%s.cfg%s"%(conf.qpage.qpath
                    ,sess.usr["qp"]
                    ,"."+QUERY["his"])
    else:        
        qpage = "%s%s.cfg%s"%(conf.qpage.qpath
                    ,sess.usr["qp"]
                    ,"")
    #...
}}}  
  * 在编辑行为中,追加个小判定,令编辑处理,知道什么时候读指定的那个历史版本文件
  
=== 可变参数的意义 ===
现在小白可是对Python 函式的可变参数深以为然了
 * 本来按照PHP 的习惯,传递的页面参数自然会变成内存对象给脚本来引用(当然,行者评点说,这是以必须有Apache 等等web 服务器的配合,直接在内存中折腾作代价换得的,,,)
 * 但是在Karrigell 中如果不严格匹配就会有:

 图 KDay5-7 参数不匹配的错误情景

attachment:kday5-arg-not-match.png 


 * 有了Python 中万能的'''(**var)''' 声明,一切都总能兼容!
{{{详细::
PCS108 函式
分享了函式这一Python 程序的基本单位的组织体验和技巧;
PCS109 系统参数
则关注函式参数的使用技巧
}}}

==== 进一步的 ====
'''突然小白想应该可以列出各版本的内容体积情况...'''
 * 继续到Python模块手册中游荡一下,发现了 `os.stat()`,先追加到代码中,输出来看一下{{{
<sub>大小:%sb</sub>
...
,os.stat(conf.qpage.qpath+l)
}}}

图 KDay5-8 原始 os.stat()输出字串
attachment:kday5-os-stat.png

  * 返回元组有文件对象的: 
   1. st_mode (protection bits), 
   1. st_ino (inode number), 
   1. st_dev (device), 
   1. st_nlink (number of hard links), 
   1. st_uid (user ID of owner), 
   1. st_gid (group ID of owner), 
   1. '''st_size''' (size of file, in bytes), 
   1. st_atime (time of most recent access), 
   1. st_mtime (time of most recent content modification), 
   1. st_ctime (platform dependent; time of most recent metadata change on Unix, or the time of creation on Windows). 
  * `ST_SIZE` 是小白想要的

  * 但是具体是哪个? 咳咳咳,看标识,只有两个是`L`长整,有变化的就倒数第四个,所以:{{{

<sub>大小:%sb</sub>
...
,os.stat(conf.qpage.qpath+l)[-4]
}}}

图 KDay5-9 os.stat()输出结果合理格式化后情景
attachment:kday5-os-stat-format.png

搞掂!嗬嗬嗬,小白真感受到了心想事儿成般自在了,,,

{{{详细::
PCS200 os(.stat;.path)
介绍了相关系统信息获取支持的常用模块的进一步操作技巧
}}}


== 小结 ==
今日,小白在昨日基础上,蒙头快速使用 .ks 模式服务页面,将原先实现了的功能全部归并到了两个文件中,进一步的:
 1. 成功!追加了不同问卷的编辑入口 ~ 通过链接参数,令编辑页面知道读入哪个文件而已
 1. 成功!增强了问题编辑的版本管理 ~ 通过支持模块快速复制原有文件,并组织好历史版本访问列表而已
完全达成了昨天的计划开发!

 本日成果::
{{{
kday5/
|-- Karrigell_QuickForm.py  KQF快速表单模块
|-- dict4ini.py         Limodou 贡献的 ini 解析模块
|-- q/                  问卷设计文本收藏目录
|   |-- CPUG051211.cfg  多问卷实例-CPyUG社区问卷
|   |-- Python051221.cfg    -Python基础问卷
|   |-- easy051201.cfg      -实验问卷草稿
|   |-- easy051201.cfg.051222112545 -实验问题编辑历史快照
|   |-- easy051201.cfg.051222121147
|   |-- easy051201.cfg.051224163125
|   `-- easy051201.cfg.051225162724
|-- index.ks            使用KS 模式重构的有登录功能的系统首页
|-- mana.ks             使用KS 模式重构问卷设计综合支持页面
|-- mana.pih            问卷设计页面
|-- qdesign.py          问卷设计实际行为脚本
|-- qpage.pih           问卷复审页面
|-- qpage.py            问卷复审实际行为脚本
|-- qprint.pih          问卷展示页面
|-- qprint.py           问卷展示实际行为脚本
|-- questionnaire.cfg   问卷系统配置文件
|-- questionnaire.tmpl  问卷展示模板
`-- tryKQF.py           KQF试用页面
}}}

== 明日任务 ==
'''哇呀呀!没有想到不论多古怪的想法,Python+Karrigell 都支持!接下来...'''
 * 就是要根据有效的成员信息来进行成绩的统计汇报了


== 实例下载 ==

使用SVN下载地址:
 * 实例下载: http://openbookproject.googlecode.com/svn/trunk/LovelyPython/KDays/kday5
 * 精巧地址: http://bit.ly/1uZlq3



== 练习 ==
    在前面章节练习mysite的基础上, 完成以下功能:  
  * (1) 在首页增加删除链接, 实现删除指定文章的功能; 
  * (2) 增加搜索功能, 即输入关键字, 进行查找后得到各个文章对象并显示到结果页面中;
  * (3) 能否优化我们现在的整个网站框架, 若能够则进行最大化的结构优化, 读者可以根据已经学到的知道自由发挥;

##endInc
= TODO =
`进一步应该解说的`
 1. 传递过来的  session 值的安装
 1. 页面输出的调试技巧
 1. 不同身份的操作菜单输出控制


----
返回 [:ObpLovelyPython/KDays:KDays实例故事]

::-- ZoomQuiet [[[DateTime(2005-12-11T04:51:21Z)]]]

[[PageComment2]]



