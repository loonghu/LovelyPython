##language:zh
#pragma section-numbers off
||'''status'''|| 校对  || ZoomQuiet || 100% ||


[[TableOfContents]]

##startInc
= CDay-2 完成核心功能 =
~ 利用文本文件完成核心功能

'''没有完美的软件,够用并且容易使用的软件已经算是完美的了'''

== 回顾需求 ==
已经获得命令行工具样的程序的小白几乎可以脱离小白的称号了,可以独立根据已往经验,不断尝试出成果来,就是大白了;-)

现在可以将最初的需求细化到这样了:

 1. 可以将光盘内容索引存储为硬盘上的文本文件
  * 存储成 *.cdc 的文本文件
  * 可以快速指定文件名 
   * 通过命令行调用`python pycdc.py -e mycd1-1.cdc`
 1. 可以根据储存到硬盘上的光盘信息进行搜索
  * 可以搜索指定目录中所有*.cdc文件
   * 通过命令行调用`python pycdc.py -d cdc -k 中国火`

但是,要一个个完成看似简单,实际有N多情况的逻辑判定,实在是令人沮丧的事儿，小白吼了声:"俺就是想作个简单的命令行工具先，乍介么难?"

热心的行者,又嗯了声:`"使用cmd吧"`

== cmd模块 ==
'''[http://aspn.activestate.com/ASPN/docs/ActivePython/2.4/python/lib/module-cmd.html cmd -- Support for line-oriented command interpreters]'''
 * 嗬! 专门支持命令行界面的模块?!
  * 但是几乎没有可以照抄的代码哪?

=== 照猫画虎的重要资源 ===
图 CDay-2-1 Learning Python
attachment:cday-2-learning-python.gif
##http://www.oreilly.com/catalog/covers/1565924649_cat.gif

不搜不知道,一搜吓一跳!原来原文技术书都在出版社网站上公开了书中代码样例:
 * [http://www.oreilly.com/catalog/lpython/ Learning Python]
 * [http://www.oreilly.com/catalog/lpython2/ Learning Python, Second Edition]

依从大学里论文的制造模式:''' "从己有的证实正确的基础上加以改造,成功的机会比较大!" '''

所以: 根据 第一版"Leaning Python" 第九章的 例程:
[http://www.woodpecker.org.cn:9081/doc/Python/PyBookExample/LearningPython/learningpython-1e-sourcecode/dos/examples/chapter9.txt rolo.py]

{{{脚注::
资源索引 章节中有完整的在线中文文档的资源介绍，
有意的读者可以在网络中针对性的对有兴趣的Python 内容进一步学习...
}}}

=== 重构当前代码 ===
重构-- '''refactoring''', 好象是很高级的编程技术,其实说穿了就是自个儿看不过去自个儿,
不断的将代码修改的更加合理,高效,吻合天道;

小白的目标是快速实现心中的功能,但是现在面对又一个全新的模块,想使用干净的脚本进行尝试,
所以将原先的代码整理到'cdctools.py';
创建新脚本 'pycdc-v0.4.py':
{{{#!python
# -*- coding: utf-8 -*-
import sys, cmd
class PyCDC(cmd.Cmd):
    def __init__(self):
        cmd.Cmd.__init__(self)                # initialize the base class
    def help_EOF(self):
        print "退出程序 Quits the program"
    def do_EOF(self, line):
        sys.exit()

    def help_walk(self):
        print "扫描光盘内容 walk cd and export into *.cdc"
    def do_walk(self, filename):
        if filename == "":filename = raw_input("输入cdc文件名:: ")
        print "扫描光盘内容保存到:'%s'" % filename

    def help_dir(self):
        print "指定保存/搜索目录"
    def do_dir(self, pathname):
        if pathname == "": pathname = raw_input("输入指定保存/搜索目录: ")

    def help_find(self):
        print "搜索关键词"
    def do_find(self, keyword):
        if keyword == "": keyword = raw_input("输入搜索关键字: ")
        print "搜索关键词:'%s'" % keyword
if __name__ == '__main__':      # this way the module can be
    cdc = PyCDC()            # imported by other programs as well
    cdc.cmdloop()
}}}

这个90% 照抄过来的脚本纯粹是用来尝试 `cmd` 模块功能的,没有作任何实际工作,只是通过打印输出信息,来印证自个儿的想法...

{{{详细:
PCS404 代码重构浅说
重构~Refactoring 是现代软件开发工程中常用技巧,
可以保证系统在可用状态下持续不断的提高代码品质!
在PCS404 中,浅显的说明了一下 重构 思想以及常见的重构技巧
}}}

==== 猜测和学习 ====
如何针对已证实有用的代码进行改造和学习?

'''猜测!''' 是最自然的方法,不用想着学习什么浑厚的背景知识,按照自个儿的理解,给当前可用的代码个说法,可以支持自个儿自由发挥就对了

运行一下:

图 CDay-2-2  pycdc-v0.4.py运行结果
attachment:cday-2-pycdc-v0.4-result.png

{{{警告::
运行时总是汇报的一个`Non-ASCII character '\xe6' ...`警告,是个中文问题,只要不影响我们的尝试,先不理会
技术和知识是无限的我们要先关注自个儿的目标,恰当的糊涂,有利于提高开发效率
}}}

经过几次尝试可以确认以下:

 1.  `if __name__ == '__main__':` 是进行自测运行用的,具体怎么回事儿先不管,好用就成
 1. `class PyCDC(cmd.Cmd):` 是进行类定义,然后可以使用 `cdc = PyCDC()` 进行实体化,进行使用类的各种功能
 1. `def __init__(self):` 是类实体化时自动运行的初始化函式
 1. `cmd.Cmd.__init__(self)` 初始化基类? 不明白,反正,要使用 `cmd` 模块,就这么来好了
 1. `def help_*()` 和 `def do_*()` 应该成对出现,一个是打印功能的帮助信息的,一个是实际干事儿的
 1. 利用`cmd` 创建的应用可以自动处理各种意外情况,汇报`*** Unknown syntax: xxx`

嗯嗯嗯!非常整齐对称的代码哪,小白不知道怎么可以不破坏这种整齐而可以加入原先的功能代码....

=== 利用自个儿的模块 ===
那么如何直接利用暂存到'cdctools.py' 的功能?
{{{#!python
# -*- coding: utf-8 -*-
import os
def cdWalker(cdrom,cdcfile):
    export = ""
    for root, dirs, files in os.walk(cdrom):
        export+="\n %s;%s;%s" % (root,dirs,files)
    open(cdcfile, 'w').write(export)
if __name__ == '__main__':      # this way the module can be
    CDROM = '/media/cdrom0'
    cdWalker(CDROM,"cdc/cdctools.cdc")
}}}

询问行者得到提示{{{
from 某脚本文件名 import *
}}}
立即拿来改造 'pycdc-v0.4.py':
{{{#!python
# -*- coding: utf-8 -*-
import sys, cmd
from cdctools import *
...
if __name__ == '__main__':      # this way the module can be
    cdc = PyCDC()            # imported by other programs as well
    cdc.cmdloop()
    CDROM = '/media/cdrom0'
    cdWalker(CDROM,"cdc/cdctools.cdc")
}}}

哈哈哈!可以运行! 而且有点明悟,从代码的复用尺度来分,从小到大应该是:
`代码行->函式->类->模块`

好象还有更大的一级`包`..具体怎么的现在用不上,就先不管了..

{{{详细::
PCS108 函式 ->PCS105 对象 -> PCS100 逻辑分支
进一步说明在不同级别的Python 执行单位中，
有哪些基础技巧
}}}

但是 `CDROM` 这种定量字串怎么融合到类中? 还有怎么令交互式命令行软件一运行就给点提示什么的?

小白的想象法随着不断的成功,也不断的膨胀起来,那么就研究文档吧...
{{{详细::
PCS201 cmd
详细描述cmd模块功能;
读者可以进一步了解到此模块的所有功能;
这是一个辅助用户快速完成一个交互式命令行环境的强力模块;
在线相关文档是: http://aspn.activestate.com/ASPN/docs/ActivePython/2.4/python/lib/module-cmd.html
精巧地址:http://bit.ly/bVos1
PCS100 import
进一步说明模块和包使用的方法和注意事项
}}}


==== pycdc-v0.5.py ====
研究和改造成果如下:{{{#!python
# -*- coding: utf-8 -*-
import sys, cmd
from cdctools import *
class PyCDC(cmd.Cmd):
    def __init__(self):
        cmd.Cmd.__init__(self)                # initialize the base class
        self.CDROM = '/media/cdrom0'
        self.CDDIR = 'cdc/'
        self.prompt="(PyCDC)>"
        self.intro = '''PyCDC0.5 使用说明:
    dir 目录名     #指定保存和搜索目录，默认是 "cdc"
    walk 文件名    #指定光盘信息文件名，使用 "*.cdc"
    find 关键词    #使用在保存和搜索目录中遍历所有.cdc文件，输出含有关键词的行
    ?           # 查询
    EOF         # 退出系统，也可以使用Crtl+D(Unix)|Ctrl+Z(Dos/Windows)
        '''
    def help_EOF(self):
        print "退出程序 Quits the program"
    def do_EOF(self, line):
        sys.exit()

    def help_walk(self):
        print "扫描光盘内容 walk cd and export into *.cdc"
    def do_walk(self, filename):
        if filename == "":filename = raw_input("输入cdc文件名:: ")
        print "扫描光盘内容保存到:'%s'" % filename
        cdWalker(self.CDROM,self.CDDIR+filename)

    def help_dir(self):
        print "指定保存/搜索目录"
    def do_dir(self, pathname):
        if pathname == "": pathname = raw_input("输入指定保存/搜索目录: ")
        self.CDDIR = pathname
        print "指定保存/搜索目录:'%s' ;默认是:'%s'" % (pathname,self.CDDIR)

    def help_find(self):
        print "搜索关键词"
    def do_find(self, keyword):
        if keyword == "": keyword = raw_input("输入搜索关键字: ")
        print "搜索关键词:'%s'" % keyword

if __name__ == '__main__':      # this way the module can be
    cdc = PyCDC() 
    cdc.cmdloop()
}}}

运行一下:

图 CDay-2-3 pycdc-v0.5.py运行结果
attachment:cday-2-pycdc-v0.5-result.png

完全吻合想象!

 1. `from cdctools import *` 可以引入己有脚本中的所有函式
 1. 在恰当的位置追加`cdWalker(self.CDROM,self.CDDIR+filename)` 就完成了实际功能的绑定
 1. `self.` 在类声名中应该是代表自个儿,代表实体化后的那个自个儿
 1. 针对类的定量应该都在`__inti__(self)` 初始化时声明
 1. `cmd`的`prompt`就是命令行环境的前缀字串
 1. `cmd`的`intro`果然是命令行环境的最初提示
 1. 由`'''`括起来的多行字串,可以被自然的记录和打印到命令行环境中

=== 实现grep ===
两大功能之一:
 1. 扫描光盘信息记录为文件

通过:`dir` 和 `walk` 命令都实现了, 就差搜索了,其实就是象 一个古老的软件 -- `grep` 打开所有符合要求的文件,读取每一行,如果有指定关键词在行内就打印输出到屏幕...

结合己有经验,可以非常简单的就实现!
{{{#!python
# -*- coding: utf-8 -*-

def cdcGrep(cdcpath,keyword):
    filelist = os.listdir(cdcpath)          # 搜索目录中的文件
    for cdc in filelist:                    # 循环文件列表
        if ".cdc" in cdc:                   # 过滤可能的其它文件,只关注.cdc
            cdcfile = open(cdcpath+cdc)         # 拼合文件路径，并打开文件
            for line in cdcfile.readlines():    # 读取文件每一行，并循环
                if keyword in line:             # 判定是否有关键词在行中
                    print line                  # 打印输出
}}}

对于小白,这个自制的最简单的 `grep` 功能,6行代码其中5行都可以自然的写出,只有一行判定代码是新的:
 * `if keyword in line:`
  * `in` 也是计算,是Python 所有数据结构都支持的一种基础的方便运算
可以在 Python 交互行命令行环境中快速测试一下{{{
>>> a='123456'
>>> '1' in a
True
>>> a=(1,2,3,4)
>>> 1 in a
True
>>> a=[1,2,3,4]
>>> 1 in a
True
>>> a={1:11,2:22,3:33}
>>> 1 in a
True
}}}

{{{脚注::
grep
古老实用高效的模式文本匹配工具，
在所有Unix、GNU/Linux 系统中都有默认安装，
最常作的事儿是 将一堆文本中包含某个模式的文本行找出来:
~$ cat /proc/cpuinfo | grep core
core id         : 0
cpu cores       : 2
core id         : 1
cpu cores       : 2

}}}

== 小结 ==
通过对 `cmd` 模块的边学边用,小白今天至少可以体验到:

 1. 类
 1. 多行注释
 1. 模块
 1. 模块自测
 1. 字串包含计算

虽然获得的可用代码,行数一下子冲破了个位数,但是90% 的代码都可以在头2天的四行代码中找到模式...

== 练习 ==

(1) 在文中grep实现例子中,没有考虑子目录的处理，因为如果直接open目录进行读操作会出现错误，所以要求读者修改这个示例代码以便考虑到子目录这种特殊情况，然后把最后探索出的 cdcGrep()嵌入 pycdc-v0.5.py 实现完成版本的 PyCDC。提示：子目录处理，可以先判断，如果是子目录，就可以递归调用cdcGrep()函式。

(2) 编写一个类，实现简单的栈。数据的操作按照先进后出(FILO)的顺序。主要成员函式为put(item)，实现数据item插入栈中；get()，实现从栈中取一个数据。

##endInc
----
::-- ZoomQuiet [[[DateTime(2007-02-23T12:43:32Z)]]]
[[PageComment2]]

